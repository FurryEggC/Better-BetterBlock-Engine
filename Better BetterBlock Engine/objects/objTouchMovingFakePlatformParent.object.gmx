<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
hspd = 0;
vspd = 0;

flag = 0;

bounce = 0;
jumps = -1;
times = 1;

yspeed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (speed != 0 || yspeed != 0)  //make sure the platform is moving before doing collision checks
{
    if (bounce)
    {
        if (place_meeting(x+hspeed,y,objBetterBlock)) {hspeed = -hspeed;}
        
        if (place_meeting(x,y+vspeed+yspeed,objBetterBlock)) 
        {
            if (vspeed != 0) 
            {
                yspeed = -vspeed;
                vspeed = 0;
            }
            else 
            {
                vspeed = -yspeed;
                yspeed = 0;
            }
        }
    }
    
    /*
    with (instance_place(x,y-(2*global.grav),objPlayer))
    {
        y += other.vspeed + other.yspeed;
        if (place_free(x+other.hspeed,y)) x += other.hspeed;
    }
    */
    
    y += yspeed;
    
    if (vspeed &lt; 0)
    {
        yspeed = vspeed;
        vspeed = 0;
    }
    if (yspeed &gt; 0) 
    {
        vspeed = yspeed;
        yspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (flag) exit;
vspeed = vspd;
hspeed = hspd;
flag = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>times--;
audio_play_sound(sndPlatformCa,1,0);

if (times == 0) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var lenth = sqrt(hspd*hspd + vspd*vspd);

var drx = hspd / lenth * 54;
var dry = vspd / lenth * 54;
var drh = hspd / lenth * 64;
var drv = vspd / lenth * 64;
var notMoving = (hspd == 0 &amp;&amp; vspd == 0);

if (position_meeting(mouse_x, mouse_y, self)) {
    draw_set_colour(c_black);
    
    if (y &lt;= 304) {
        if (notMoving) draw_sprite(sprTouchMovingPlatformFakeNotMovingHint, 0, mouse_x, mouse_y);
        else draw_sprite(sprTouchMovingPlatformFakeHint, 0, mouse_x, mouse_y);
    }
    else {
        if (notMoving) draw_sprite(sprTouchMovingPlatformFakeNotMovingHintUp, 0, mouse_x, mouse_y);
        else draw_sprite(sprTouchMovingPlatformFakeHintUp, 0, mouse_x, mouse_y);
    }
    
    draw_set_font(fTouchMovingPlatformHint);
    draw_set_colour(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
        
        if (y &lt;= 304) {
            if (notMoving) draw_text(mouse_x + 3, mouse_y + 28, "times : " + string(times));
            else if (!flag) {
                draw_line_width(x+16, y+8, x+16+drx, y+8+dry, 2);
                draw_arrow(x+16, y+8, x+16+drh, y+8+drv, 20);
                draw_text(mouse_x + 3, mouse_y + 30, "h : " + string_format(hspd, 2, 2));
                draw_text(mouse_x + 3, mouse_y + 60, "v : " + string_format(vspd, 2, 2));
                draw_text(mouse_x + 3, mouse_y + 90, "times : " + string(times));
            }
            else {
                draw_text(mouse_x + 3, mouse_y + 42, "Moving");
                draw_text(mouse_x + 3, mouse_y + 78, "times : " + string(times));
            }
        }
        else {
            if (notMoving) draw_text(mouse_x + 3, mouse_y - 32, "times : " + string(times));
            else if (!flag) {
                draw_line_width(x+16, y+8, x+16+drx, y+8+dry, 2);
                draw_arrow(x+16, y+8, x+16+drh, y+8+drv, 20);
                draw_text(mouse_x + 3, mouse_y - 93, "h : " + string_format(hspd, 2, 2));
                draw_text(mouse_x + 3, mouse_y - 63, "v : " + string_format(vspd, 2, 2));
                draw_text(mouse_x + 3, mouse_y - 33, "times : " + string(times));
            }
            else {
                draw_text(mouse_x + 3, mouse_y - 83, "Moving");
                draw_text(mouse_x + 3, mouse_y - 43, "times : " + string(times));
            }
        }
        
    draw_set_font(fDefault12);
    draw_set_colour(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
