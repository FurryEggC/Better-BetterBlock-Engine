<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Default Settings and variables
frozen = false; //sets if the player can move or not

jump = 8.5 * global.grav; //set how fast the player jumps
jump2 = 7 * global.grav; //sets how fast the player double jumps
gravity = 0.4 * global.grav; //player gravity

djump = global.jump - 1; // how much extra jumps could player get
maxSpeed = 3;   //max horizontal speed
maxVspeed = 9;  //max vertical speed
image_speed = 0.2; //initial speed of animation
onPlatform = false; //sets if player is currently standing on a platform

bulletMax = 4;  // max numbers of bullet
bulletSpd = 16;  // speed of bullet

hitTimes = 0;  // hit limit of death, 0 to off hitMode
hitGap = 50;  // hit decrease after frames

/// ------------------- New Gimmicks
inBubble = noone;  // the condition of inBubble, noone bubble
bubbleSpdMax = 3;  // the speed of inBubble
global.noDeath = 0;

xScale = 1; //sets the direction the player is facing (1 is facing right, -1 is facing left)

scrSetPlayerMask(); //set the player's hitbox

instance_create(x,y,objBow);

if (global.autosave) //save the game if currently set to autosave
{
    scrSaveGame(true);
    global.autosave = false;
}

//[Better Block]
//used to check if riding a platform will put the player into/through a block
platCheck = 0;
platCounter = 0;
//the Better Platform/Block which the player is on, if there is one
riding = noone;
//records player movement
PhSpd = 0;
PvSpd = 0;
//amount pushed by Better Blocks (used to carry the player)
hPush = 0;
//Version 1.1: used to store the relationship between the player's origin and their bbox
leftToOrigin = (sprite_get_xoffset(mask_index) - sprite_get_bbox_left(mask_index))*image_xscale;
rightToOrigin = (sprite_get_bbox_right(mask_index) - sprite_get_xoffset(mask_index) + 1)*image_xscale;
topToOrigin = (sprite_get_yoffset(mask_index) - sprite_get_bbox_top(mask_index))*image_yscale;
bottomToOrigin = (sprite_get_bbox_bottom(mask_index) - sprite_get_yoffset(mask_index) + 1)*image_yscale;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Default Skin
can_change = 1;
can_blend = 1;
total_skin = 5;

// noraml kid
Animation_running[0] = sprPlayerRunning;
Animation_idle[0] = sprPlayerIdle;
Animation_jump[0] = sprPlayerJump;
Animation_fall[0] = sprPlayerFall;
Animation_sliding[0] = sprPlayerSliding;

// dark kid
Animation_running[1] = sprPlayerRunning2;
Animation_idle[1] = sprPlayerIdle2;
Animation_jump[1] = sprPlayerJump2;
Animation_fall[1] = sprPlayerFall2;
Animation_sliding[1] = sprPlayerSliding2;

// outstanding kid
Animation_running[2] = sprPlayerRunning3;
Animation_idle[2] = sprPlayerIdle3;
Animation_jump[2] = sprPlayerJump3;
Animation_fall[2] = sprPlayerFall3;
Animation_sliding[2] = sprPlayerSliding3;

// pure color kid
Animation_running[3] = sprPlayerRunning4;
Animation_idle[3] = sprPlayerIdle4;
Animation_jump[3] = sprPlayerJump4;
Animation_fall[3] = sprPlayerFall4;
Animation_sliding[3] = sprPlayerSliding4;

// outline kid
Animation_running[4] = sprPlayerRunning5;
Animation_idle[4] = sprPlayerIdle5;
Animation_jump[4] = sprPlayerJump5;
Animation_fall[4] = sprPlayerFall5;
Animation_sliding[4] = sprPlayerSliding5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Special draw
shader = shdColorful;
u_time = shader_get_uniform(shader, "u_time");

specialDraw = instance_exists(objColorfulEffectControl) &amp;&amp; (global.skin == 3 || global.skin == 4);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//when the player is destroyed, also destroy the bow
with (objBow)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// For hitMode
global.noDeath = false;
image_alpha = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death Check And Animation

// check if player has left the room
if ((x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height) &amp;&amp; global.edgeDeath)  
    scrKillPlayer();

// update player sprite
// dotkid check
if (global.dotkid) {
    sprite_index = sprPlayerDotkidCircle;
}
else  {  // normal kid
    // block/vine checks
    if (place_free(x,y+global.grav) &amp;&amp; !instance_exists(riding)) var notOnBlock = true else var notOnBlock = false
    var onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);
    var onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
    
    if (!onVineR &amp;&amp; !onVineL)   //not touching any vines or standing on a Better Block (possibly above a vine)
    {
        if (onPlatform || !notOnBlock)  //standing on something
        {
            //check if moving left/right
            var L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)));
            var R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)));
            
            if ((L || R) &amp;&amp; !frozen)
            {
                sprite_index = Animation_running[global.skin];
                image_speed = 1/2;
            }
            else
            {
                sprite_index = Animation_idle[global.skin];
                image_speed = 1/5;
            }
        }
        else    //in the air
        { 
            if ((vspeed * global.grav) &lt; 0)
            {
                sprite_index = Animation_jump[global.skin];
                image_speed = 1/2;
            }
            else
            {
                sprite_index = Animation_fall[global.skin];
                image_speed = 1/2;
            }
        }
    }
    else    //touching a vine
    {
        sprite_index = Animation_sliding[global.skin];
        image_speed = 1/2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BetterBlock

//Set up Player variables for objBetterBlock and objBetterMovingPlatform
PhSpd = (x - xprevious);
PvSpd = (y - yprevious);

//Version 1.1: used to store the relationship between the player's origin and their bbox
leftToOrigin = (sprite_get_xoffset(mask_index) - sprite_get_bbox_left(mask_index))*image_xscale;
rightToOrigin = (sprite_get_bbox_right(mask_index) - sprite_get_xoffset(mask_index) + 1)*image_xscale;
topToOrigin = (sprite_get_yoffset(mask_index) - sprite_get_bbox_top(mask_index))*image_yscale;
bottomToOrigin = (sprite_get_bbox_bottom(mask_index) - sprite_get_yoffset(mask_index) + 1)*image_yscale;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Before Origninal System
if instance_exists(riding) event_user(0);  // onBlock check

// Skin Changing And Bow System
{
    // skin change
    if (can_change) {
        if scrButtonCheckPressed(global.skinLeftButton) global.skin -= 1;
        if scrButtonCheckPressed(global.skinRightButton) global.skin += 1;
        
        if (global.skin &lt; 0) {global.skin += total_skin;}
        else if (global.skin &gt;= total_skin) {global.skin -= total_skin;}
        
        if (global.skin == 3 || global.skin == 4 || global.dotkid == 1) specialDraw = instance_exists(objColorfulEffectControl);
        else specialDraw = 0;
    }
    
    // change blend in 3, 4 and dotkid
    if (can_blend) {
        if (global.skin == 3 || global.skin == 4 || global.dotkid == 1) {
            global.skinBlend += 3*scrButtonCheck(global.upButton) - 3*scrButtonCheck(global.downButton);
            global.skinBlend = clamp(global.skinBlend,0,256 * 5);
            image_blend = make_color_hsv((global.skinBlend) mod 256, scrColorBlendFunction(global.skinBlend), clamp(global.skinBlend, 0, 255));
        }
        else image_blend = c_white;
    }
    
    // bow
    if scrButtonCheckPressed(global.bowButton) global.bow = 1 - global.bow;
    
    scrSaveGame(false);  // save skin &amp; bow config
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gimmick Related Gravity And Speed
gravity = 0.4 * global.grav;
maxSpeed = 3;
maxVspeed = 9;

// change after them
if (inBubble) {
    if (inBubble.reverse == 0) {
        gravity = -0.3 * global.grav;
        if (global.grav == 1) {
            if (vspeed &lt; -bubbleSpdMax) vspeed = -bubbleSpdMax;
        }
        else if (vspeed &gt; bubbleSpdMax) vspeed = bubbleSpdMax;
    }
    else if (inBubble.reverse == 1) {
        gravity = 0.3 * global.grav;
        if (global.grav == 1) {
            if (vspeed &gt; bubbleSpdMax) vspeed = bubbleSpdMax;
        }
        else if (vspeed &lt; -bubbleSpdMax) vspeed = -bubbleSpdMax;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Oringinal Game System

//check left/right button presses
var L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)));
var R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)));

var h = 0;

if (!frozen)    //don't move if frozen
{
    if (R)
        h = 1;
    else if (L)
        h = -1;
}

var slipBlockTouching = instance_place(x,y+(1*global.grav),objSlipBlock);   //check if on a slip block

//vine checks
var notOnBlock = (place_free(x,y+(global.grav)) &amp;&amp; !instance_exists(riding));
var onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
var onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);

if (h != 0)  //player is moving
{
    if (!onVineR &amp;&amp; !onVineL)   //make sure not currently touching a vine
    {
        xScale = h;
    }
    if ((h == -1 &amp;&amp; !onVineR) || (h == 1 &amp;&amp; !onVineL))
    {
        if (slipBlockTouching == noone) //not touching a slip block, move immediately at full speed
        {
            hspeed = maxSpeed * h;
        }
        else    //touching a slip block, use acceleration
        {
            hspeed += (slipBlockTouching.slip) * h;
            
            if (abs(hspeed) &gt; maxSpeed)
                hspeed = maxSpeed * h;
        }
    }
}
else    //player is not moving
{
    if (slipBlockTouching == noone) //not touching a slip block, stop immediately
        hspeed = 0;
    else    //touching a slip block, slow down
    {
        if (hspeed &gt; 0)
        {
            hspeed -= slipBlockTouching.slip;
            
            if (hspeed &lt;= 0)
                hspeed = 0;
        }
        else if (hspeed &lt; 0)
        {
            hspeed += slipBlockTouching.slip;
            
            if (hspeed &gt;= 0)
                hspeed = 0;
        }
    }
}

if (!place_meeting(x,y+(4*global.grav),objPlatform)){onPlatform = false};

var slideBlockTouching = instance_place(x,y+(global.grav),objSlideBlock);   //check if on a slide block

if (slideBlockTouching != noone)    //on a slide block, start moving with it
    hspeed += slideBlockTouching.h;

if (abs(vspeed) &gt; maxVspeed) {vspeed = sign(vspeed)*maxVspeed;} //check if moving vertically faster than max speed

if (!frozen)    //check if frozen before doing anything
{
    if (scrButtonCheckPressed(global.shootButton))
        scrPlayerShoot();
    if (scrButtonCheckPressed(global.jumpButton))
        scrPlayerJump();
    if (scrButtonCheckReleased(global.jumpButton))
        scrPlayerVJump();
    if (scrButtonCheckPressed(global.suicideButton))
        scrKillPlayer();
}

if (global.adAlign &amp;&amp; place_meeting(x,y+(global.grav),objBlock) &amp;&amp; !frozen)  // A/D align
{
    if (scrButtonCheckPressed(global.alignLeftButton)) {hspeed -= 1;}
    if (scrButtonCheckPressed(global.alignRightButton)) {hspeed += 1;}
}


// walljumps
scrVineAction();

// slopes

if (instance_exists(objSlope) &amp;&amp; hspeed != 0)
{
    var moveLimit = 12;    //sets how high/low the player can go to snap onto a slope, this can be increased to make the player able to run over steeper slopes (ie setting it to abs(hspeed)*2 allows the player to run over slopes twice as steep)
    
    var slopeCheck;
    var hTest;
    
    var ySlope;
    
    //falling onto a slope
    if (place_meeting(x+hspeed,y+vspeed+gravity,objSlope) &amp;&amp; (vspeed+gravity)*global.grav &gt; 0 &amp;&amp; notOnBlock)
    {
        var xLast = x;
        var yLast = y;
        var hLast = hspeed;
        var vLast = vspeed;
        
        vspeed += gravity;
        
        x += hspeed;
        hspeed = 0;
        
        if(!place_free(x,y+vspeed))
        {
            if (global.grav == 1)   //normal
                move_contact_solid(270,abs(vspeed));
            else    //flipped
                move_contact_solid(90,abs(vspeed));
            vspeed = 0;
        }
        
        y += vspeed;            
        
        if (!place_free(x,y+(global.grav)) &amp;&amp; place_free(x,y))  //snapped onto the slope properly
        {
            djump = global.jump - 1;
            notOnBlock = false;
        }
        else    //did not snap onto the slope, return to previous position
        {
            x = xLast;
            y = yLast;
            hspeed = hLast;
            vspeed = vLast;
        }
    }
    
    // moving down a slope
    if (!notOnBlock)
    {
        var onSlope = (place_meeting(x,y+(global.grav),objSlope));    //treat normal blocks the same as slopes if we're standing on a slope
        
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            // check how far we should move down
            while ((!place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; !place_meeting(x+hTest,y-ySlope+(global.grav),objBlock))) &amp;&amp; ySlope*global.grav &gt; -floor(moveLimit*(hTest/hspeed)))
            {
                ySlope -= global.grav;
            }
            
            //check if we actually need to move down
            if (place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; place_meeting(x+hTest,y-ySlope+(global.grav),objBlock)))
            {
                if (ySlope != 0 &amp;&amp; !place_meeting(x+hTest,y-ySlope,objBlock))
                {
                    y -= ySlope;
                    
                    x += hTest;
                    hspeed = 0;
                    
                    slopeCheck = false;
                }
                else
                {
                    if (hTest &gt; 0)
                    {
                        hTest -= 1;
                        if (hTest &lt;= 0)
                            slopeCheck = false;
                    }
                    else if (hTest &lt; 0)
                    {
                        hTest += 1;
                        if (hTest &gt;= 0)
                            slopeCheck = false;
                    }
                    else
                    {
                        slopeCheck = false;
                    }
                }
            }
            else
            {
                slopeCheck = false;
            }
        }
    }
    
    //moving up a slope
    if (place_meeting(x+hspeed,y,objSlope))
    {
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            
            // check how far we have to move up
            while (place_meeting(x+hTest,y-ySlope,objSlope) &amp;&amp; ySlope*global.grav &lt; floor(moveLimit*(hTest/hspeed)))
            {
                ySlope += global.grav;
            }
            
            // check if we actually need to move up
            if (place_free(x+hTest,y-ySlope))
            {            
                y -= ySlope;
                
                x += hTest;
                hspeed = 0;
                
                slopeCheck = false;
            }
            else
            {
                if (hTest &gt; 0)
                {
                    hTest -= 1;
                    if (hTest &lt;= 0)
                        slopeCheck = false;
                }
                else if (hTest &lt; 0)
                {
                    hTest += 1;
                    if (hTest &gt;= 0)
                        slopeCheck = false;
                }
                else
                {
                    slopeCheck = false;
                }
            }
        }
    }
    
    // set xprevious/yprevious coordinates for future solid collisions
    xprevious = x;
    yprevious = y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After Original System

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objWaterParents">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Bubble Broke
if (inBubble) {
    with inBubble event_user(0);
    inBubble = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objKillerBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Bubble Broke
if (inBubble) {
    with inBubble event_user(0);
    inBubble = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!inBubble) {
    if (hitTimes &gt; 0 &amp;&amp; !global.noDeath) {
        hitTimes--;
        global.noDeath = 1;
        alarm[0] = hitGap;
        audio_play_sound(sndDeath,0,false);
        image_alpha = 0.6;  // god mode shortly
    }
    else scrKillPlayer();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scrIsBetterPlatform(other) || scrIsBetterBlock(other)) exit;

if (global.grav == 1)   //normal
{
    if (y-vspeed/2 &lt;= other.y)
    {
        if (other.vspeed &gt;= 0)
        {
            y = other.y-9;
            vspeed = other.vspeed;
        }
        
        onPlatform = true;
        event_user(0);
    }
}
else    //flipped
{
    if (y-vspeed/2 &gt;= other.y+other.sprite_height-1)
    {
        if ((other.vspeed*-1) &lt;= 0)
        {
            y = other.y+other.sprite_height+8;
            vspeed = -1*other.vspeed;
        }
        
        onPlatform = true;
        event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBetterBlockBase">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Push out to avoid colliding with objects embedded in Better Blocks
PhSpd = (x - xprevious);
PvSpd = (y - yprevious);
with (other){
    event_user(0);
    event_user(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scrIsBetterPlatform(other) || scrIsBetterBlock(other))
    exit;
if (!place_free(x+hspeed,y))
{
    if (global.grav == 1)   //normal
    {
        if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));event_user(3);}  // rignt wall
        if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));event_user(2);}  // left wall
    }
    else    //flipped
    {
        if(hspeed &lt; 0){move_contact_solid(180,abs(hspeed));event_user(3);}
        if(hspeed &gt;= 0){move_contact_solid(0,abs(hspeed));event_user(2);}
    }
    hspeed = 0;
}
 
if (!place_free(x,y+vspeed))
{
    if (global.grav == 1)   //normal
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));event_user(1);}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));event_user(0);}
    }
    else    //flipped
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));event_user(0);}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));event_user(1);}
    }
    vspeed = 0;
}

if (!place_free(x+hspeed,y+vspeed)) {hspeed = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Right Side Collision Action

// Bubble Broke
if (inBubble) {
    with inBubble event_user(0);
    inBubble = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Left Side Collision Action

// Bubble Broke
if (inBubble) {
    with inBubble event_user(0);
    inBubble = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bonk block Action

// Bubble Broke
if (inBubble) {
    with inBubble event_user(0);
    inBubble = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On Block action
djump = global.jump - 1;

// Bubble Broke
if (inBubble) {
    with inBubble event_user(0);
    inBubble = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player

if (specialDraw) {
    shader_set(shader);
    shader_set_uniform_f(u_time, objColorfulEffectControl.t);
}

var drawX = x;
var drawY = y;

if (global.grav == -1)      //need to draw the player a pixel off in the y-axis when flipped for some reason
    drawY += 1;

       
draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);

//draw the player's hitbox
if (global.debugShowHitbox)
    draw_sprite_ext(mask_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha*0.8);
    
if (specialDraw) shader_reset();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug draw
//draw_text(x, y - 40, hitTimes);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
