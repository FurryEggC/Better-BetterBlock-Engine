<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 不再调用 event_inherited();
airPush = 0;

// 可自定义的值
pushSpeed = 2
grav = 0.2
maxFallSpeed = 9

// 内部使用
h = 0
v = 0
xMoved = 0
yMoved = 0
xPrev = 0
yPrev = 0

// 推动状态
isBeingPushed = false
pushDirection = 0

// 用于避免重复检测
checkedThisFrame = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 不再调用 event_inherited();

// 只有当方块没有被推动且没有玩家在旁边时才回退位置
if (h != 0 &amp;&amp; !isBeingPushed &amp;&amp; 
    !instance_place(x-1, y, objPlayer) &amp;&amp; 
    !instance_place(x+1, y, objPlayer)) {
    x = xPrev;
    y = yPrev;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 不再调用 event_inherited();
xPrev = x;
yPrev = y;

// 重置状态
checkedThisFrame = false;
isBeingPushed = false;
pushDirection = 0;

// 检测玩家推动
var playerLeft = instance_place(x-1, y, objPlayer) != noone;
var playerRight = instance_place(x+1, y, objPlayer) != noone;

if (playerLeft &amp;&amp; scrButtonCheck(global.rightButton)) {
    isBeingPushed = true;
    pushDirection = 1;
} else if (playerRight &amp;&amp; scrButtonCheck(global.leftButton)) {
    isBeingPushed = true;
    pushDirection = -1;
}

// 处理重力
v += grav;
if (abs(v) &gt; maxFallSpeed) {
    v = sign(v) * maxFallSpeed;
}

// 处理推动
h = 0;
if (isBeingPushed &amp;&amp; !checkedThisFrame) {
    checkedThisFrame = true;
    
    var moveDir = pushDirection;
    var moveAmount = pushSpeed;
    
    // 收集所有需要推动的方块
    var pushChain = ds_list_create();
    var checkedBlocks = ds_list_create();
    
    // 添加当前方块到推动链
    ds_list_add(pushChain, id);
    ds_list_add(checkedBlocks, id);
    
    // 查找所有相连的方块
    var i = 0;
    while (i &lt; ds_list_size(pushChain)) {
        var currentBlock = ds_list_find_value(pushChain, i);
        
        // 检查当前方块前方是否有其他方块
        with (currentBlock) {
            var nextBlock = instance_place(x + moveDir, y, objPushBlock);
            if (nextBlock != noone &amp;&amp; !ds_list_find_index(checkedBlocks, nextBlock)) {
                ds_list_add(pushChain, nextBlock);
                ds_list_add(checkedBlocks, nextBlock);
            }
        }
        
        i++;
    }
    
    // 检查整个推动链是否可以移动
    var canPush = true;
    
    // 检查推动链最前方的方块是否可以移动
    var frontBlock = ds_list_find_value(pushChain, ds_list_size(pushChain) - 1);
    with (frontBlock) {
        // 检查是否有障碍物（非PushBlock的固体对象）
        var obstacle = instance_place(x + moveDir, y, objBetterBlock);
        if (obstacle != noone) {
            canPush = false;
        }
        
        // 检查是否有其他固体障碍物
        if (place_meeting(x + moveDir, y, objBlock) &amp;&amp; !place_meeting(x + moveDir, y, objPushBlock)) {
            canPush = false;
        }
        
        // 如果不是悬空推动且不在另一个方块上，则停止水平移动
        if (!airPush &amp;&amp; !place_meeting(x, y+1*sign(grav), objBetterBlock) &amp;&amp; 
            !place_meeting(x, y+1*sign(grav), objBlock)) {
            canPush = false;
        }
    }
    
    // 如果可以推动，移动所有方块
    if (canPush) {
        h = moveDir * moveAmount;
        
        // 移动推动链中的所有方块（从最远的开始）
        for (var j = ds_list_size(pushChain) - 1; j &gt;= 0; j--) {
            var blockToMove = ds_list_find_value(pushChain, j);
            if (blockToMove != noone) {
                blockToMove.x += h;
                if (blockToMove != id) {
                    blockToMove.isBeingPushed = true;
                    blockToMove.pushDirection = pushDirection;
                    blockToMove.checkedThisFrame = true; // 避免重复处理
                }
            }
        }
    }
    
    // 清理数据结构
    ds_list_destroy(pushChain);
    ds_list_destroy(checkedBlocks);
}

// 垂直移动
if not place_meeting(x, y+v, objBetterBlock) and not place_meeting(x, y+v, objBlock) {
    y += v;
} else {
    repeat (abs(v) * 10) {
        y += sign(v) * grav;
        if place_meeting(x, y, objBetterBlock) or place_meeting(x, y, objBlock) {
            y -= sign(v) * grav;
            break;
        }
    }
    v = -grav;
}

xMoved = x;
yMoved = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 处理与普通方块的碰撞
if (!isBeingPushed) {
    x = xMoved;
    y = yMoved;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
