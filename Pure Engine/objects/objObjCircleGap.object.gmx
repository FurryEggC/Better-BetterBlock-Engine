<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCherryWhite</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>numCherries = 3;  // Number of cherries in the circle
cyt = 200;  // In the default case, one cycle is 200 frames. (4 seconds)
motion = 1;
// 1 = normal circle   2 = loop back to center
// 3 = complex circle  4 = swaying circle
radius = 64;  // Maximum distance of the cherries from the center
obj = objCherry;
a0 = 0;  // angle 0
angleChange = 0;  // If changeing angle
gap = 0;  // skip how many apples
spr_ind = -1;  // sprite_index of spawn obj, -1 to default

t = 0;
i = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Calculate radius and angle based on timer and radius
// Then move each cherry to that location

for (i=0; i &lt; numCherries; i++) {
    if (i &lt; gap) continue;
    ct = t+i/numCherries // individual cherry's time
    r = radius;
    a = ct * 360 + a0;
    
    // normal circle
    if motion == 1 {
        r = radius;
        a = ct * 360 + a0;
    }
    // loop back to center
    else if motion == 2 {
        r = radius*sin(t*pi*4);
        a = ct * 360 + a0;
    }
    // complex circle
    else if motion == 3 {
        r = radius;
        a = 360*sin(degtorad(a + a0));
    }
    // swaying circle
    else if motion == 4 {
        r = radius;
        a = ct*360 + 30*sin(degtorad((a + a0) * numCherries));
    }
    
    // Move cherries
    cherries[i].x = x + lengthdir_x(r, a);
    cherries[i].y = y + lengthdir_y(r, a);
    if (angleChange) cherries[i].image_angle = a + 90 * sign(cyt);
}
t += dt;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dt = 1 / cyt;  // Time increment, where 1t = 1 cycle.

for (i = 0; i &lt; numCherries; i++) {
    if (i &lt; gap) continue;
    cherries[i] = instance_create(x, y, obj);
    cherries[i].depth = depth;
    if (spr_ind != -1) cherries[i].sprite_index = spr_ind;
}
event_perform(ev_step, ev_step_normal);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
